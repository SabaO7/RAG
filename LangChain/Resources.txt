
resources: 
* https://www.youtube.com/watch?v=aywZrzNaKjs
* https://www.youtube.com/watch?v=P3MAbZ2eMUI 

LangChain is a framework designed to simplify the creation of applications using large language models. As a language model integration framework, LangChain's use-cases largely overlap with those of language models in general, including document analysis and summarization, chatbots, and code analysis
* combining LLMs with external sources of computation and data 
* helps with connecting entire database (external) with the LLMs

document is stored in docuemtn --> the document is chunked --> chunks are stored as vector 

Scneario:
* for example a user asks a question, both the question and the relative information from the similarity search from the vectors (external source) is then used to provide the most accurate response  

the main valuable purposes of langchain can be divivded into these three areas:
* Components
  ** LLM wrappers (help to connect LLM models)
  ** Prompt Templates (avoid having to hard code text which is the input to LLMs )
  ** Indexes for relvant information retrieval
  ** document loaders (to load data from sources like pdf)
  ** text splitter (to chunk down the text before storing it to the vector)

* Chains
  ** Assemble components to solve a specfic task, such as finding info in a book

* Agents
  ** agents allow LLMs to interact with it's environment. For instance, make API request with a specifci action. 
  ** figures out what it needs to do, then executes 

Modules offered by LangChain
1) Models 
    ** two types of models 
        *** Language Models 
          **** LLMs (wrap APIs and take text and return text)
            ***** Function: LLMs take text as input and return text as output. They are typically pre-trained on vast amounts of data and are capable of understanding and generating human-like text.
            ***** Usage: LLMs are used for a variety of tasks such as answering questions, generating content, summarizing text, and more. They can wrap APIs, meaning they can be integrated with external systems to enhance their capabilities.
            ***** Examples: OpenAI's GPT-3 or GPT-4, Google's BERT, and similar large-scale models.
          **** Chat models (wrap models which take chat messages in and return a chat message)
            ***** Function: These models are specifically optimized for conversational contexts. They are designed to handle the back-and-forth nature of dialogue, maintaining context and coherence over a series of exchanges.
            ***** Usage: Chat models are ideal for building chatbots, virtual assistants, and other applications where ongoing, interactive communication is needed. They can understand queries, retain conversational context, and provide responses that are contextually relevant.
            ***** Characteristics: Chat models might include additional tuning or features to handle specific conversational nuances and to maintain a coherent thread in the conversation.
        *** Text-embedding models (helps with semantic search)

2) Propmpts
  ** input to the model
  ** LangChain provides a constructed prompt with multiple values 
  ** supports common use cases such as few shot learning or output parsing 
  ** Conepts to know include:
      *** Prompt Templates:
        **** Function: Prompt templates are pre-defined structures or formats used to present information or questions to a language model in a consistent and effective manner. They act as a guide for how input data should be formatted before being sent to the model.
        **** Usage: Templates ensure that the input to the model is clear, contextually relevant, and conducive to generating the desired output. For example, if you're building a system for answering questions from a text, the prompt template might consistently structure the input as "Given [Text], what is the answer to [Question]?"
        **** Customization: Prompt templates can often be customized to suit different types of tasks, such as text completion, question answering, summarization, etc.

      *** Output Parsers:
        **** Function: After a language model generates output, output parsers are used to interpret or process this output into a structured and usable form.
        **** Usage: They're crucial in extracting specific information or transforming the raw output into a more useful format. For instance, if the output is a long paragraph, an output parser might extract key dates, names, or other specific data points.
        ****Flexibility: Output parsers can vary greatly depending on the requirements of the application, ranging from simple regex-based extractors to more complex natural language understanding processes.
      
      *** Example Selectors:

        **** Function: Example selectors are used to choose the most relevant examples or pieces of information from a set, which are then typically used to form part of a prompt for a language model.
        **** Usage: In scenarios where a model needs context or background information to answer a question or generate text, example selectors pick out the most relevant pieces of information from a larger dataset.
        **** Method: The selection might be based on similarity to a query, relevance to a current topic, or any other criterion that's deemed important for the task at hand.
      
      *** Chat Prompt Templates:
        **** Function: Similar to prompt templates, but specifically tailored for conversational contexts. They structure the input in a way that's conducive to generating coherent and contextually appropriate responses in a chat or dialogue setting.
        **** Usage: These templates are essential in chatbots or conversational agents, ensuring that the flow of the conversation is natural and that the model's responses are relevant to the previous dialogue history.
        **** Design: They often include mechanisms to maintain context or reference previous parts of the conversation, which is crucial for maintaining a coherent and engaging interaction.


3) Indexes
  ** document loaders can be used with text-splitter if the text is too long and exceeds the token limit
  ** the text chunks needs to be embded and then be stored, that way we can use them later with semnatic search 
  ** you then want to store everything in a vectorstores 
  ** for retrieval, the VectorStoreRetriever can be used  
  ** Purpose: Indexes in LangChain are used to organize and retrieve information efficiently.
  ** Integration: They are often used in conjunction with document loaders and text splitters, especially when dealing with long texts that exceed the token limits of language models.
  ** Process: The text is first split into manageable chunks, then these chunks are embedded (converted into vector representations) for efficient storage and retrieval.
  ** VectorStores: The embedded text chunks are stored in a structure known as a VectorStore. This allows for efficient semantic search, as the vectors represent the semantic content of the text.
  ** Retrieval: For retrieving information from these stores, LangChain uses a component like VectorStoreRetriever, which facilitates the semantic search and retrieval of relevant text chunks based on query vectors.

4) Memory:
  ** Function: Memory in LangChain refers to the capability of maintaining and recalling information over time or across different interactions.
  ** Usage: This is particularly important for applications like chatbots or systems that need to remember previous interactions or store context from past queries.
  ** Implementation: Memory can be implemented in various ways, such as by storing conversation logs, user preferences, or other relevant data that can be referenced in future interactions.

5) Chains:
  ** Concept: Chains in LangChain refer to the assembly of multiple components to solve a specific task. It's akin to creating a workflow or pipeline where each component contributes to the overall functionality.
  ** Examples: A chain could include a sequence like a document loader, a text splitter, a language model for processing, and then an output parser to structure the response.
  ** Flexibility: Chains can be customized and combined in various ways to address complex tasks, such as finding specific information in a book or processing a series of documents.

6) Agents:
  ** Function: Agents in LangChain are autonomous systems that can interact with their environment. They represent the active components that make decisions and execute actions.
  ** Interactivity: Agents can make API requests, interact with databases, or perform specific actions based on the context and requirements of the task.
  ** Decision-Making: An agent determines what needs to be done based on the input it receives, the state of its environment, and its programmed objectives. Then, it executes the necessary actions, which could involve querying a language model, retrieving information, or interacting with external APIs.
